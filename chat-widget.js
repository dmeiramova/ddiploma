(() => {
    window.onload = async function () {
      const chatConfig = {
        agentId: "5003048b-d91d-4318-b20a-8a1afcd759a1", // –í–∞—à –∞–≥–µ–Ω—Ç ID
      };
  
      await initializeChatWidget(chatConfig);
    };
  
    async function initializeChatWidget(config) {
      console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞...");
  
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Markdown
      const markedScript = document.createElement("script");
      markedScript.src = "https://cdn.jsdelivr.net/npm/marked/marked.min.js";
      document.head.appendChild(markedScript);
      await new Promise((resolve) => (markedScript.onload = resolve));
  
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º CSS —Å—Ç–∏–ª–∏
      document.head.appendChild(
        Object.assign(document.createElement("link"), {
          rel: "stylesheet",
          href: "https://app.nextbot.ru/styles.css",
        })
      );
  
      // HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∏–¥–∂–µ—Ç–∞
      const chatWidgetHTML = `
          <div class="prefix_chat-icon">üí¨</div>
          <div class="prefix_chat-widget">    
              <div class="prefix_chat-header">
                <span class="prefix_header-text">NEXTBOT</span>
                <span class="prefix_close-icon">√ó</span>
              </div>
              <div class="prefix_chat-body">
                <div class="prefix_chat-messages"></div>
                  <div class="prefix_chat-input">
                    <div contenteditable="true" class="chat-input-content" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." data-placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...">–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</div>
                    <button></button>
                  </div>
              </div>
          </div>
      `;
  
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const chatContainer = document.createElement("div");
      chatContainer.id = "chatWidgetContainer";
      chatContainer.innerHTML = chatWidgetHTML;
      document.body.appendChild(chatContainer);
  
      // API URL
      const URL = "https://app.nextbot.ru";
  
      // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞
      const chatWidget = document.querySelector(".prefix_chat-widget");
      const chatIcon = document.querySelector(".prefix_chat-icon");
      const closeIcon = document.querySelector(".prefix_close-icon");
      const chatMessages = document.querySelector(".prefix_chat-messages");
      const sendButton = document.querySelector(".prefix_chat-input button");
      const inputElem = document.querySelector(".prefix_chat-input .chat-input-content");
  
      let userId = localStorage.getItem("userId");
      if (!userId) {
        localStorage.setItem("userId", generateUUID());
        userId = localStorage.getItem("userId");
      }
  
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç–∞
      const { historyMessages, startMessage, widgetProperties } =
        await fetchInitialProperties(config.agentId, userId);
  
      if (historyMessages && historyMessages.length > 0) {
        historyMessages.forEach((msg) => {
          addMessageToChat(msg.content, msg.role);
        });
      } else {
        addMessageToChat(startMessage, "assistant");
      }
  
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∂–µ—Ç–∞
      setWidgetProperties(widgetProperties);
  
      function setWidgetProperties(properties) {
        if (properties.header_text) {
          document.querySelector(".prefix_header-text").textContent = properties.header_text;
        }
      }
  
      // –ö–ª–∏–∫–∏ –ø–æ –∏–∫–æ–Ω–∫–µ —á–∞—Ç–∞
      chatIcon.addEventListener("click", function () {
        chatIcon.style.display = "none";
        chatWidget.style.display = "block";
      });
  
      closeIcon.addEventListener("click", function () {
        chatWidget.style.display = "none";
        chatIcon.style.display = "flex";
      });
  
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
      sendButton.addEventListener("click", async function () {
        const message = inputElem.textContent.trim();
        if (message) {
          addMessageToChat(message, "user");
          const response = await sendMessage(message, config);
          if (response?.content) {
            addMessageToChat(response.content, "assistant");
          }
        }
      });
  
      async function sendMessage(message, config) {
        const response = await fetch(`${URL}/api/widget/chat/${config.agentId}`, {
          headers: { "Content-Type": "application/json" },
          method: "POST",
          body: JSON.stringify({ userId, messages: [{ role: "user", content: message }] }),
        });
        return response.ok ? await response.json() : console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", response.statusText);
      }
  
      async function fetchInitialProperties(agentId, userId) {
        const response = await fetch(`${URL}/api/widget/init/${agentId}?userId=${userId}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
        });
        return response.ok ? await response.json() : console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", response.statusText);
      }
  
      function addMessageToChat(message, role) {
        const messageElem = document.createElement("div");
        try {
          messageElem.innerHTML = marked.parse(message);
        } catch (error) {
          messageElem.textContent = message;
        }
        messageElem.classList.add("message", role);
        chatMessages.appendChild(messageElem);
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }
  
      function generateUUID() {
        return "yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
          var r = (Math.random() * 16) | 0,
            v = c === "x" ? r : (r & 0x3) | 0x8;
          return v.toString(16);
        });
      }
    }
  })();